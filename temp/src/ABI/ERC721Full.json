{
  "contractName": "ERC721Full",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "symbol",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.0+commit.1d4f565a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"see https://eips.ethereum.org/EIPS/eip-721\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.\",\"params\":{\"to\":\"address to be approved for the given token ID\",\"tokenId\":\"uint256 ID of the token to be approved\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address\",\"params\":{\"owner\":\"address to query the balance of\"},\"return\":\"uint256 representing the amount owned by the passed address\"},\"getApproved(uint256)\":{\"details\":\"Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the approval of\"},\"return\":\"address currently approved for the given token ID\"},\"isApprovedForAll(address,address)\":{\"details\":\"Tells whether an operator is approved by a given owner\",\"params\":{\"operator\":\"operator address which you want to query the approval of\",\"owner\":\"owner address which you want to query the approval of\"},\"return\":\"bool whether the given operator is approved by the given owner\"},\"name()\":{\"details\":\"Gets the token name\",\"return\":\"string representing the token name\"},\"ownerOf(uint256)\":{\"details\":\"Gets the owner of the specified token ID\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the owner of\"},\"return\":\"address currently marked as the owner of the given token ID\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator\",\"params\":{\"_data\":\"bytes data to send along with a safe transfer check\",\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf\",\"params\":{\"approved\":\"representing the status of the approval to be set\",\"to\":\"operator address to set the approval\"}},\"supportsInterface(bytes4)\":{\"details\":\"implement supportsInterface(bytes4) using a lookup table\"},\"symbol()\":{\"details\":\"Gets the token symbol\",\"return\":\"string representing the token symbol\"},\"tokenByIndex(uint256)\":{\"details\":\"Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens\",\"params\":{\"index\":\"uint256 representing the index to be accessed of the tokens list\"},\"return\":\"uint256 token ID at the given index of the tokens list\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Gets the token ID at a given index of the tokens list of the requested owner\",\"params\":{\"index\":\"uint256 representing the index to be accessed of the requested tokens list\",\"owner\":\"address owning the tokens list to be accessed\"},\"return\":\"uint256 token ID at the given index of the tokens list owned by the requested address\"},\"tokenURI(uint256)\":{\"details\":\"Returns an URI for a given token ID Throws if the token ID does not exist. May return an empty string.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query\"}},\"totalSupply()\":{\"details\":\"Gets the total amount of tokens stored by the contract\",\"return\":\"uint256 representing the total amount of tokens\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg.sender to be the owner, approved, or operator\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}}},\"title\":\"Full ERC721 Token This implementation includes all the required and some optional functionality of the ERC721 standard Moreover, it includes approve all functionality using operator terminology\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/token/ERC721/ERC721Full.sol\":\"ERC721Full\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/drafts/Counters.sol\":{\"keccak256\":\"0x6b84da52c86e1098570a53cfb5df17a81612ec55085d698b15e51e5e50d57c6a\",\"urls\":[\"bzzr://659be1b1902a5b41a93144ab3281d8ce1af0112085d0a8c5bea757d53d3b0242\"]},\"/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/introspection/ERC165.sol\":{\"keccak256\":\"0xfc9a150499d249615460ef54216349677a41ff1e4dc06e74fdbfb20814ec91f9\",\"urls\":[\"bzzr://b8344d02cd9715be9cbf3a5a288867d4cc2a05c5834fd0073b747c85132c8f5e\"]},\"/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/introspection/IERC165.sol\":{\"keccak256\":\"0x627b77e4b5ad61ef6366ae3b135ca9bc7a20d5e4e971a74526031119452a8e54\",\"urls\":[\"bzzr://76e887336232edaeed7b1f29341df09bccf5078720fc66a8dbf780f32719e2ad\"]},\"/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xc31006228f03130fa677c7e7769b8fd0b1c5257deedae3fc278eb542b33c3059\",\"urls\":[\"bzzr://261b657d8d26013b2d3f95554f7f2ec853851ceec6333940d016feadff8b435a\"]},\"/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/token/ERC721/ERC721.sol\":{\"keccak256\":\"0xe0fe2733c23247f065b38d104f528b98738a0beddb21ae7f4268778b0c830d50\",\"urls\":[\"bzzr://24f8716f9d2ee0b5ceb6f3a97ffdfcb39a2c25f09cef7ed969b1376d83ac5e21\"]},\"/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/token/ERC721/ERC721Enumerable.sol\":{\"keccak256\":\"0x4d7c343562e86e094621ed11c69f781739359f85df2aeddff2bb6880aef1ec77\",\"urls\":[\"bzzr://64f8bff020635f1100b47390880a3eb0ec48a10dcf0b65d1ce8055312c54a314\"]},\"/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/token/ERC721/ERC721Full.sol\":{\"keccak256\":\"0xb3d409b31261149253d5870a58fea56885ac0986aede90b2c937697456d00401\",\"urls\":[\"bzzr://7f248de64cec375c9178e9ce6756355fa09a375592ca7bc300a75333555f9d4a\"]},\"/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/token/ERC721/ERC721Metadata.sol\":{\"keccak256\":\"0x7b9bfa5acadf9f95d7513dd383a76e222f16736ebf95a80702c730c4784c2218\",\"urls\":[\"bzzr://8d1478177a21cd73d57749d5958e72ff8175d705929c842379446518c42af3ea\"]},\"/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xaecf9e1556fc8350695c984472ba26ebac162710937847bbd100bc6d154fe481\",\"urls\":[\"bzzr://e1576472a9731267b88567e74de222465266948ea0bef51df339b2b09d319b43\"]},\"/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/token/ERC721/IERC721Enumerable.sol\":{\"keccak256\":\"0x6b45c03e27b2eba226c0cfc3a3a4280fb91940d4062551faf96d00a856666624\",\"urls\":[\"bzzr://dd95a7bf975dd7289cd381aa49bf35ddf76c3f8f1eeb3863237e2e3ad8897f3e\"]},\"/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/token/ERC721/IERC721Metadata.sol\":{\"keccak256\":\"0xbff2dff2d7cf5184ee265fd3270523b1f654e7237fa3bb28bf0762acce6b8f40\",\"urls\":[\"bzzr://b99bbdc4d1a488d65c89b644f7a934c20d3955fc4786e314331a6fc59b600d92\"]},\"/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0x5a9e5aec9a5b29c8d81eb11fe6b4a0257668afcef747084957ba571b5c35cfcb\",\"urls\":[\"bzzr://6ae859faaf95d84f7b2c4ba588fff189b09762d9f4aeff2946c0a35436426e4d\"]},\"/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/utils/Address.sol\":{\"keccak256\":\"0xf627731aa5c4097a9e1fbdfd607f1f86b89ed498bf36968feaaad7dc89eacb1c\",\"urls\":[\"bzzr://ce30a05f75296b2676490a9492ea7a789d4035ef3ccad75da7baf9567724381e\"]}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200124338038062001243833981018060405260408110156200003757600080fd5b8101908080516401000000008111156200005057600080fd5b820160208101848111156200006457600080fd5b81516401000000008111828201871017156200007f57600080fd5b505092919060200180516401000000008111156200009c57600080fd5b82016020810184811115620000b057600080fd5b8151640100000000811182820187101715620000cb57600080fd5b509093508492508391506200010b90507f01ffc9a700000000000000000000000000000000000000000000000000000000640100000000620001dd810204565b6200013f7f80ac58cd00000000000000000000000000000000000000000000000000000000640100000000620001dd810204565b620001737f780e9d6300000000000000000000000000000000000000000000000000000000640100000000620001dd810204565b8151620001889060099060208501906200024a565b5080516200019e90600a9060208401906200024a565b50620001d37f5b5e139f00000000000000000000000000000000000000000000000000000000640100000000620001dd810204565b50505050620002ef565b7fffffffff0000000000000000000000000000000000000000000000000000000080821614156200020d57600080fd5b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152602081905260409020805460ff19166001179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200028d57805160ff1916838001178555620002bd565b82800160010185558215620002bd579182015b82811115620002bd578251825591602001919060010190620002a0565b50620002cb929150620002cf565b5090565b620002ec91905b80821115620002cb5760008155600101620002d6565b90565b610f4480620002ff6000396000f3fe6080604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a781146100ea57806306fdde0314610147578063081812fc146101d1578063095ea7b31461021757806318160ddd1461025257806323b872dd146102795780632f745c59146102bc57806342842e0e146102f55780634f6ccce7146103385780636352211e1461036257806370a082311461038c57806395d89b41146103bf578063a22cb465146103d4578063b88d4fde1461040f578063c87b56dd146104e2578063e985e9c51461050c575b600080fd5b3480156100f657600080fd5b506101336004803603602081101561010d57600080fd5b50357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916610547565b604080519115158252519081900360200190f35b34801561015357600080fd5b5061015c61057b565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561019657818101518382015260200161017e565b50505050905090810190601f1680156101c35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101dd57600080fd5b506101fb600480360360208110156101f457600080fd5b5035610612565b60408051600160a060020a039092168252519081900360200190f35b34801561022357600080fd5b506102506004803603604081101561023a57600080fd5b50600160a060020a038135169060200135610644565b005b34801561025e57600080fd5b506102676106fa565b60408051918252519081900360200190f35b34801561028557600080fd5b506102506004803603606081101561029c57600080fd5b50600160a060020a03813581169160208101359091169060400135610700565b3480156102c857600080fd5b50610267600480360360408110156102df57600080fd5b50600160a060020a038135169060200135610725565b34801561030157600080fd5b506102506004803603606081101561031857600080fd5b50600160a060020a03813581169160208101359091169060400135610772565b34801561034457600080fd5b506102676004803603602081101561035b57600080fd5b503561078e565b34801561036e57600080fd5b506101fb6004803603602081101561038557600080fd5b50356107c3565b34801561039857600080fd5b50610267600480360360208110156103af57600080fd5b5035600160a060020a03166107ed565b3480156103cb57600080fd5b5061015c610825565b3480156103e057600080fd5b50610250600480360360408110156103f757600080fd5b50600160a060020a0381351690602001351515610886565b34801561041b57600080fd5b506102506004803603608081101561043257600080fd5b600160a060020a0382358116926020810135909116916040820135919081019060808101606082013564010000000081111561046d57600080fd5b82018360208201111561047f57600080fd5b803590602001918460018302840111640100000000831117156104a157600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061090a945050505050565b3480156104ee57600080fd5b5061015c6004803603602081101561050557600080fd5b5035610932565b34801561051857600080fd5b506101336004803603604081101561052f57600080fd5b50600160a060020a03813581169160200135166109e7565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660009081526020819052604090205460ff1690565b60098054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106075780601f106105dc57610100808354040283529160200191610607565b820191906000526020600020905b8154815290600101906020018083116105ea57829003601f168201915b505050505090505b90565b600061061d82610a15565b151561062857600080fd5b50600090815260026020526040902054600160a060020a031690565b600061064f826107c3565b9050600160a060020a03838116908216141561066a57600080fd5b33600160a060020a0382161480610686575061068681336109e7565b151561069157600080fd5b600082815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60075490565b61070a3382610a32565b151561071557600080fd5b610720838383610a91565b505050565b6000610730836107ed565b821061073b57600080fd5b600160a060020a038316600090815260056020526040902080548390811061075f57fe5b9060005260206000200154905092915050565b610720838383602060405190810160405280600081525061090a565b60006107986106fa565b82106107a357600080fd5b60078054839081106107b157fe5b90600052602060002001549050919050565b600081815260016020526040812054600160a060020a03168015156107e757600080fd5b92915050565b6000600160a060020a038216151561080457600080fd5b600160a060020a03821660009081526003602052604090206107e790610ab0565b600a8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106075780601f106105dc57610100808354040283529160200191610607565b600160a060020a03821633141561089c57600080fd5b336000818152600460209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b610915848484610700565b61092184848484610ab4565b151561092c57600080fd5b50505050565b606061093d82610a15565b151561094857600080fd5b6000828152600b602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156109db5780601f106109b0576101008083540402835291602001916109db565b820191906000526020600020905b8154815290600101906020018083116109be57829003601f168201915b50505050509050919050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205460ff1690565b600090815260016020526040902054600160a060020a0316151590565b600080610a3e836107c3565b905080600160a060020a031684600160a060020a03161480610a79575083600160a060020a0316610a6e84610612565b600160a060020a0316145b80610a895750610a8981856109e7565b949350505050565b610a9c838383610c30565b610aa68382610d1f565b6107208282610e16565b5490565b6000610ac884600160a060020a0316610e54565b1515610ad657506001610a89565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03888116602485015260448401879052608060648501908152865160848601528651600095928a169463150b7a029490938c938b938b939260a4019060208501908083838e5b83811015610b69578181015183820152602001610b51565b50505050905090810190601f168015610b965780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015610bb857600080fd5b505af1158015610bcc573d6000803e3d6000fd5b505050506040513d6020811015610be257600080fd5b50517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f150b7a020000000000000000000000000000000000000000000000000000000014915050949350505050565b82600160a060020a0316610c43826107c3565b600160a060020a031614610c5657600080fd5b600160a060020a0382161515610c6b57600080fd5b610c7481610e5c565b600160a060020a0383166000908152600360205260409020610c9590610ea6565b600160a060020a0382166000908152600360205260409020610cb690610ebd565b600081815260016020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600160a060020a038216600090815260056020526040812054610d4990600163ffffffff610ec616565b600083815260066020526040902054909150808214610de657600160a060020a0384166000908152600560205260408120805484908110610d8657fe5b90600052602060002001549050806005600087600160a060020a0316600160a060020a0316815260200190815260200160002083815481101515610dc657fe5b600091825260208083209091019290925591825260069052604090208190555b600160a060020a0384166000908152600560205260409020805490610e0f906000198301610edb565b5050505050565b600160a060020a0390911660009081526005602081815260408084208054868652600684529185208290559282526001810183559183529091200155565b6000903b1190565b600081815260026020526040902054600160a060020a031615610ea3576000818152600260205260409020805473ffffffffffffffffffffffffffffffffffffffff191690555b50565b8054610eb990600163ffffffff610ec616565b9055565b80546001019055565b600082821115610ed557600080fd5b50900390565b8154818355818111156107205760008381526020902061072091810190830161060f91905b80821115610f145760008155600101610f00565b509056fea165627a7a72305820afc73f3895b47fdbf367979486ed00b02bf5b18d34bb9ff623c18a36233b08ec0029",
  "deployedBytecode": "0x6080604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a781146100ea57806306fdde0314610147578063081812fc146101d1578063095ea7b31461021757806318160ddd1461025257806323b872dd146102795780632f745c59146102bc57806342842e0e146102f55780634f6ccce7146103385780636352211e1461036257806370a082311461038c57806395d89b41146103bf578063a22cb465146103d4578063b88d4fde1461040f578063c87b56dd146104e2578063e985e9c51461050c575b600080fd5b3480156100f657600080fd5b506101336004803603602081101561010d57600080fd5b50357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916610547565b604080519115158252519081900360200190f35b34801561015357600080fd5b5061015c61057b565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561019657818101518382015260200161017e565b50505050905090810190601f1680156101c35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101dd57600080fd5b506101fb600480360360208110156101f457600080fd5b5035610612565b60408051600160a060020a039092168252519081900360200190f35b34801561022357600080fd5b506102506004803603604081101561023a57600080fd5b50600160a060020a038135169060200135610644565b005b34801561025e57600080fd5b506102676106fa565b60408051918252519081900360200190f35b34801561028557600080fd5b506102506004803603606081101561029c57600080fd5b50600160a060020a03813581169160208101359091169060400135610700565b3480156102c857600080fd5b50610267600480360360408110156102df57600080fd5b50600160a060020a038135169060200135610725565b34801561030157600080fd5b506102506004803603606081101561031857600080fd5b50600160a060020a03813581169160208101359091169060400135610772565b34801561034457600080fd5b506102676004803603602081101561035b57600080fd5b503561078e565b34801561036e57600080fd5b506101fb6004803603602081101561038557600080fd5b50356107c3565b34801561039857600080fd5b50610267600480360360208110156103af57600080fd5b5035600160a060020a03166107ed565b3480156103cb57600080fd5b5061015c610825565b3480156103e057600080fd5b50610250600480360360408110156103f757600080fd5b50600160a060020a0381351690602001351515610886565b34801561041b57600080fd5b506102506004803603608081101561043257600080fd5b600160a060020a0382358116926020810135909116916040820135919081019060808101606082013564010000000081111561046d57600080fd5b82018360208201111561047f57600080fd5b803590602001918460018302840111640100000000831117156104a157600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061090a945050505050565b3480156104ee57600080fd5b5061015c6004803603602081101561050557600080fd5b5035610932565b34801561051857600080fd5b506101336004803603604081101561052f57600080fd5b50600160a060020a03813581169160200135166109e7565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660009081526020819052604090205460ff1690565b60098054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106075780601f106105dc57610100808354040283529160200191610607565b820191906000526020600020905b8154815290600101906020018083116105ea57829003601f168201915b505050505090505b90565b600061061d82610a15565b151561062857600080fd5b50600090815260026020526040902054600160a060020a031690565b600061064f826107c3565b9050600160a060020a03838116908216141561066a57600080fd5b33600160a060020a0382161480610686575061068681336109e7565b151561069157600080fd5b600082815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60075490565b61070a3382610a32565b151561071557600080fd5b610720838383610a91565b505050565b6000610730836107ed565b821061073b57600080fd5b600160a060020a038316600090815260056020526040902080548390811061075f57fe5b9060005260206000200154905092915050565b610720838383602060405190810160405280600081525061090a565b60006107986106fa565b82106107a357600080fd5b60078054839081106107b157fe5b90600052602060002001549050919050565b600081815260016020526040812054600160a060020a03168015156107e757600080fd5b92915050565b6000600160a060020a038216151561080457600080fd5b600160a060020a03821660009081526003602052604090206107e790610ab0565b600a8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106075780601f106105dc57610100808354040283529160200191610607565b600160a060020a03821633141561089c57600080fd5b336000818152600460209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b610915848484610700565b61092184848484610ab4565b151561092c57600080fd5b50505050565b606061093d82610a15565b151561094857600080fd5b6000828152600b602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156109db5780601f106109b0576101008083540402835291602001916109db565b820191906000526020600020905b8154815290600101906020018083116109be57829003601f168201915b50505050509050919050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205460ff1690565b600090815260016020526040902054600160a060020a0316151590565b600080610a3e836107c3565b905080600160a060020a031684600160a060020a03161480610a79575083600160a060020a0316610a6e84610612565b600160a060020a0316145b80610a895750610a8981856109e7565b949350505050565b610a9c838383610c30565b610aa68382610d1f565b6107208282610e16565b5490565b6000610ac884600160a060020a0316610e54565b1515610ad657506001610a89565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03888116602485015260448401879052608060648501908152865160848601528651600095928a169463150b7a029490938c938b938b939260a4019060208501908083838e5b83811015610b69578181015183820152602001610b51565b50505050905090810190601f168015610b965780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015610bb857600080fd5b505af1158015610bcc573d6000803e3d6000fd5b505050506040513d6020811015610be257600080fd5b50517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f150b7a020000000000000000000000000000000000000000000000000000000014915050949350505050565b82600160a060020a0316610c43826107c3565b600160a060020a031614610c5657600080fd5b600160a060020a0382161515610c6b57600080fd5b610c7481610e5c565b600160a060020a0383166000908152600360205260409020610c9590610ea6565b600160a060020a0382166000908152600360205260409020610cb690610ebd565b600081815260016020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600160a060020a038216600090815260056020526040812054610d4990600163ffffffff610ec616565b600083815260066020526040902054909150808214610de657600160a060020a0384166000908152600560205260408120805484908110610d8657fe5b90600052602060002001549050806005600087600160a060020a0316600160a060020a0316815260200190815260200160002083815481101515610dc657fe5b600091825260208083209091019290925591825260069052604090208190555b600160a060020a0384166000908152600560205260409020805490610e0f906000198301610edb565b5050505050565b600160a060020a0390911660009081526005602081815260408084208054868652600684529185208290559282526001810183559183529091200155565b6000903b1190565b600081815260026020526040902054600160a060020a031615610ea3576000818152600260205260409020805473ffffffffffffffffffffffffffffffffffffffff191690555b50565b8054610eb990600163ffffffff610ec616565b9055565b80546001019055565b600082821115610ed557600080fd5b50900390565b8154818355818111156107205760008381526020902061072091810190830161060f91905b80821115610f145760008155600101610f00565b509056fea165627a7a72305820afc73f3895b47fdbf367979486ed00b02bf5b18d34bb9ff623c18a36233b08ec0029",
  "sourceMap": "390:227:34:-;;;460:155;8:9:-1;5:2;;;30:1;27;20:12;5:2;460:155:34;;;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;460:155:34;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;62:21;;123:4;114:14;;138:31;;;135:2;;;182:1;179;172:12;135:2;213:10;;261:11;244:29;;285:43;;;282:58;-1:-1;233:115;230:2;;;361:1;358;351:12;230:2;0:372;;460:155:34;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;62:21;;123:4;114:14;;138:31;;;135:2;;;182:1;179;172:12;135:2;213:10;;261:11;244:29;;285:43;;;282:58;-1:-1;233:115;230:2;;;361:1;358;351:12;230:2;-1:-1;460:155:34;;-1:-1:-1;537:4:34;;-1:-1:-1;460:155:34;;-1:-1:-1;647:40:16;;-1:-1:-1;666:20:16;647:18;;;;:40;:::i;:::-;1978::31;1997:20;1978:18;;;;:40;:::i;:::-;1235:51:33;1254:31;1235:18;;;;:51;:::i;:::-;745:12:36;;;;:5;;:12;;;;;:::i;:::-;-1:-1:-1;767:16:36;;;;:7;;:16;;;;;:::i;:::-;-1:-1:-1;871:49:36;890:29;871:18;;;;:49;:::i;:::-;673:254;;460:155:34;;390:227;;997:158:16;1072:25;;;;;;1064:34;;;;;;1108:33;;:20;:33;;;;;;;;;;:40;;-1:-1:-1;;1108:40:16;1144:4;1108:40;;;997:158::o;390:227:34:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;390:227:34;;;-1:-1:-1;390:227:34;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;",
  "deployedSourceMap": "390:227:34:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;785:133:16;;8:9:-1;5:2;;;30:1;27;20:12;5:2;785:133:16;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;785:133:16;-1:-1:-1;;785:133:16;;;;;;;;;;;;;;;;;;;;;1031:83:36;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1031:83:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1031:83:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3781:151:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3781:151:31;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3781:151:31;;;;;;;-1:-1:-1;;;;;3781:151:31;;;;;;;;;;;;;;3204:292;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3204:292:31;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;3204:292:31;;;;;;;;;;;2000:94:33;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2000:94:33;;;;;;;;;;;;;;;;;;;;5337:180:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5337:180:31;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;5337:180:31;;;;;;;;;;;;;;;;;;1666:182:33;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1666:182:33;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;1666:182:33;;;;;;;;;6150:132:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6150:132:31;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;6150:132:31;;;;;;;;;;;;;;;;;;2431:148:33;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2431:148:33;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2431:148:33;;;2606:177:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2606:177:31;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2606:177:31;;;2228:160;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2228:160:31;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2228:160:31;-1:-1:-1;;;;;2228:160:31;;;1222:87:36;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1222:87:36;;;;4224:213:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4224:213:31;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;4224:213:31;;;;;;;;;;;6987:211;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6987:211:31;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;;;;;6987:211:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;6987:211:31;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;6987:211:31;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;6987:211:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;6987:211:31;;-1:-1:-1;6987:211:31;;-1:-1:-1;;;;;6987:211:31;1508:151:36;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1508:151:36;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1508:151:36;;;4758:145:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4758:145:31;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;4758:145:31;;;;;;;;;;;785:133:16;-1:-1:-1;;878:33:16;855:4;878:33;;;;;;;;;;;;;;785:133::o;1031:83:36:-;1102:5;1095:12;;;;;;;;-1:-1:-1;;1095:12:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1070:13;;1095:12;;1102:5;;1095:12;;1102:5;1095:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1031:83;;:::o;3781:151:31:-;3840:7;3867:16;3875:7;3867;:16::i;:::-;3859:25;;;;;;;;-1:-1:-1;3901:24:31;;;;:15;:24;;;;;;-1:-1:-1;;;;;3901:24:31;;3781:151::o;3204:292::-;3267:13;3283:16;3291:7;3283;:16::i;:::-;3267:32;-1:-1:-1;;;;;;3317:11:31;;;;;;;;3309:20;;;;;;3347:10;-1:-1:-1;;;;;3347:19:31;;;;:58;;;3370:35;3387:5;3394:10;3370:16;:35::i;:::-;3339:67;;;;;;;;3417:24;;;;:15;:24;;;;;;:29;;-1:-1:-1;;3417:29:31;-1:-1:-1;;;;;3417:29:31;;;;;;;;;3461:28;;3417:24;;3461:28;;;;;;;3204:292;;;:::o;2000:94:33:-;2070:10;:17;2000:94;:::o;5337:180:31:-;5427:39;5446:10;5458:7;5427:18;:39::i;:::-;5419:48;;;;;;;;5478:32;5492:4;5498:2;5502:7;5478:13;:32::i;:::-;5337:180;;;:::o;1666:182:33:-;1746:7;1781:16;1791:5;1781:9;:16::i;:::-;1773:24;;1765:33;;;;;;-1:-1:-1;;;;;1815:19:33;;;;;;:12;:19;;;;;:26;;1835:5;;1815:26;;;;;;;;;;;;;;1808:33;;1666:182;;;;:::o;6150:132:31:-;6236:39;6253:4;6259:2;6263:7;6236:39;;;;;;;;;;;;;:16;:39::i;2431:148:33:-;2489:7;2524:13;:11;:13::i;:::-;2516:21;;2508:30;;;;;;2555:10;:17;;2566:5;;2555:17;;;;;;;;;;;;;;2548:24;;2431:148;;;:::o;2606:177:31:-;2661:7;2696:20;;;:11;:20;;;;;;-1:-1:-1;;;;;2696:20:31;2734:19;;;2726:28;;;;;;2771:5;2606:177;-1:-1:-1;;2606:177:31:o;2228:160::-;2283:7;-1:-1:-1;;;;;2310:19:31;;;;2302:28;;;;;;-1:-1:-1;;;;;2347:24:31;;;;;;:17;:24;;;;;:34;;:32;:34::i;1222:87:36:-;1295:7;1288:14;;;;;;;;-1:-1:-1;;1288:14:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1263:13;;1288:14;;1295:7;;1288:14;;1295:7;1288:14;;;;;;;;;;;;;;;;;;;;;;;;4224:213:31;-1:-1:-1;;;;;4303:16:31;;4309:10;4303:16;;4295:25;;;;;;4349:10;4330:30;;;;:18;:30;;;;;;;;-1:-1:-1;;;;;4330:34:31;;;;;;;;;;;;:45;;-1:-1:-1;;4330:45:31;;;;;;;;;;4390:40;;;;;;;4330:34;;4349:10;4390:40;;;;;;;;;;;4224:213;;:::o;6987:211::-;7093:31;7106:4;7112:2;7116:7;7093:12;:31::i;:::-;7142:48;7165:4;7171:2;7175:7;7184:5;7142:22;:48::i;:::-;7134:57;;;;;;;;6987:211;;;;:::o;1508:151:36:-;1566:13;1599:16;1607:7;1599;:16::i;:::-;1591:25;;;;;;;;1633:19;;;;:10;:19;;;;;;;;;1626:26;;;;;;-1:-1:-1;;1626:26:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1633:19;;1626:26;;1633:19;1626:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1508:151;;;:::o;4758:145:31:-;-1:-1:-1;;;;;4861:25:31;;;4838:4;4861:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;4758:145::o;7392:152::-;7449:4;7481:20;;;:11;:20;;;;;;-1:-1:-1;;;;;7481:20:31;7518:19;;;7392:152::o;7904:246::-;7989:4;8005:13;8021:16;8029:7;8021;:16::i;:::-;8005:32;;8066:5;-1:-1:-1;;;;;8055:16:31;:7;-1:-1:-1;;;;;8055:16:31;;:51;;;;8099:7;-1:-1:-1;;;;;8075:31:31;:20;8087:7;8075:11;:20::i;:::-;-1:-1:-1;;;;;8075:31:31;;8055:51;:87;;;;8110:32;8127:5;8134:7;8110:16;:32::i;:::-;8047:96;7904:246;-1:-1:-1;;;;7904:246:31:o;2954:239:33:-;3039:38;3059:4;3065:2;3069:7;3039:19;:38::i;:::-;3088:47;3121:4;3127:7;3088:32;:47::i;:::-;3146:40;3174:2;3178:7;3146:27;:40::i;1070:112:11:-;1161:14;;1070:112::o;10742:347:31:-;10863:4;10888:15;:2;-1:-1:-1;;;;;10888:13:31;;:15::i;:::-;10887:16;10883:58;;;-1:-1:-1;10926:4:31;10919:11;;10883:58;10967:70;;;;;11004:10;10967:70;;;;;;-1:-1:-1;;;;;10967:70:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;10951:13;;10967:36;;;;;;11004:10;;11016:4;;11022:7;;11031:5;;10967:70;;;;;;;;;;;10951:13;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;10967:70:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10967:70:31;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10967:70:31;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10967:70:31;-1:-1:-1;;11055:26:31;11065:16;11055:26;;-1:-1:-1;;10742:347:31;;;;;;:::o;9852:362::-;9965:4;-1:-1:-1;;;;;9945:24:31;:16;9953:7;9945;:16::i;:::-;-1:-1:-1;;;;;9945:24:31;;9937:33;;;;;;-1:-1:-1;;;;;9988:16:31;;;;9980:25;;;;;;10016:23;10031:7;10016:14;:23::i;:::-;-1:-1:-1;;;;;10050:23:31;;;;;;:17;:23;;;;;:35;;:33;:35::i;:::-;-1:-1:-1;;;;;10095:21:31;;;;;;:17;:21;;;;;:33;;:31;:33::i;:::-;10139:20;;;;:11;:20;;;;;;:25;;-1:-1:-1;;10139:25:31;-1:-1:-1;;;;;10139:25:31;;;;;;;;;10180:27;;10139:20;;10180:27;;;;;;;9852:362;;;:::o;6056:1128:33:-;-1:-1:-1;;;;;6343:18:33;;6318:22;6343:18;;;:12;:18;;;;;:25;:32;;6373:1;6343:32;:29;:32;:::i;:::-;6385:18;6406:26;;;:17;:26;;;;;;6318:57;;-1:-1:-1;6536:28:33;;;6532:323;;-1:-1:-1;;;;;6602:18:33;;6580:19;6602:18;;;:12;:18;;;;;:34;;6621:14;;6602:34;;;;;;;;;;;;;;6580:56;;6684:11;6651:12;:18;6664:4;-1:-1:-1;;;;;6651:18:33;-1:-1:-1;;;;;6651:18:33;;;;;;;;;;;;6670:10;6651:30;;;;;;;;;;;;;;;;;;;;;:44;;;;6767:30;;;:17;:30;;;;;:43;;;6532:323;-1:-1:-1;;;;;6941:18:33;;;;;;:12;:18;;;;;:27;;;;;-1:-1:-1;;6941:27:33;;;:::i;:::-;;6056:1128;;;;:::o;4902:183::-;-1:-1:-1;;;;;5015:16:33;;;;;;;:12;:16;;;;;;;;:23;;4986:26;;;:17;:26;;;;;:52;;;5048:16;;;39:1:-1;23:18;;45:23;;5048:30:33;;;;;;;;4902:183::o;471:616:45:-;531:4;1034:20;;1072:8;;471:616::o;11250:171:31:-;11349:1;11313:24;;;:15;:24;;;;;;-1:-1:-1;;;;;11313:24:31;:38;11309:106;;11402:1;11367:24;;;:15;:24;;;;;:37;;-1:-1:-1;;11367:37:31;;;11309:106;11250:171;:::o;1283:108:11:-;1363:14;;:21;;1382:1;1363:21;:18;:21;:::i;:::-;1346:38;;1283:108::o;1188:89::-;1251:19;;1269:1;1251:19;;;1188:89::o;1219:145:21:-;1277:7;1304:6;;;;1296:15;;;;;;-1:-1:-1;1333:5:21;;;1219:145::o;390:227:34:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "source": "pragma solidity >=0.5.0 <0.6.0;\n\nimport \"./ERC721.sol\";\nimport \"./ERC721Enumerable.sol\";\nimport \"./ERC721Metadata.sol\";\n\n/**\n * @title Full ERC721 Token\n * This implementation includes all the required and some optional functionality of the ERC721 standard\n * Moreover, it includes approve all functionality using operator terminology\n * @dev see https://eips.ethereum.org/EIPS/eip-721\n */\ncontract ERC721Full is ERC721, ERC721Enumerable, ERC721Metadata {\n    constructor (string memory name, string memory symbol) public ERC721Metadata(name, symbol) {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n}\n",
  "sourcePath": "/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/token/ERC721/ERC721Full.sol",
  "ast": {
    "absolutePath": "/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/token/ERC721/ERC721Full.sol",
    "exportedSymbols": {
      "ERC721Full": [
        4085
      ]
    },
    "id": 4086,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 4063,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0",
          "<",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:31:34"
      },
      {
        "absolutePath": "/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/token/ERC721/ERC721.sol",
        "file": "./ERC721.sol",
        "id": 4064,
        "nodeType": "ImportDirective",
        "scope": 4086,
        "sourceUnit": 3703,
        "src": "33:22:34",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/token/ERC721/ERC721Enumerable.sol",
        "file": "./ERC721Enumerable.sol",
        "id": 4065,
        "nodeType": "ImportDirective",
        "scope": 4086,
        "sourceUnit": 4062,
        "src": "56:32:34",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/token/ERC721/ERC721Metadata.sol",
        "file": "./ERC721Metadata.sol",
        "id": 4066,
        "nodeType": "ImportDirective",
        "scope": 4086,
        "sourceUnit": 4237,
        "src": "89:30:34",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 4067,
              "name": "ERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3702,
              "src": "413:6:34",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721_$3702",
                "typeString": "contract ERC721"
              }
            },
            "id": 4068,
            "nodeType": "InheritanceSpecifier",
            "src": "413:6:34"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 4069,
              "name": "ERC721Enumerable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 4061,
              "src": "421:16:34",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Enumerable_$4061",
                "typeString": "contract ERC721Enumerable"
              }
            },
            "id": 4070,
            "nodeType": "InheritanceSpecifier",
            "src": "421:16:34"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 4071,
              "name": "ERC721Metadata",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 4236,
              "src": "439:14:34",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Metadata_$4236",
                "typeString": "contract ERC721Metadata"
              }
            },
            "id": 4072,
            "nodeType": "InheritanceSpecifier",
            "src": "439:14:34"
          }
        ],
        "contractDependencies": [
          1828,
          1975,
          3702,
          4061,
          4236,
          4467,
          4494,
          4529
        ],
        "contractKind": "contract",
        "documentation": "@title Full ERC721 Token\nThis implementation includes all the required and some optional functionality of the ERC721 standard\nMoreover, it includes approve all functionality using operator terminology\n@dev see https://eips.ethereum.org/EIPS/eip-721",
        "fullyImplemented": true,
        "id": 4085,
        "linearizedBaseContracts": [
          4085,
          4236,
          4529,
          4061,
          4494,
          3702,
          4467,
          1828,
          1975
        ],
        "name": "ERC721Full",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 4083,
              "nodeType": "Block",
              "src": "551:64:34",
              "statements": []
            },
            "documentation": null,
            "id": 4084,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 4079,
                    "name": "name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4074,
                    "src": "537:4:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "id": 4080,
                    "name": "symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4076,
                    "src": "543:6:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }
                ],
                "id": 4081,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 4078,
                  "name": "ERC721Metadata",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 4236,
                  "src": "522:14:34",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC721Metadata_$4236_$",
                    "typeString": "type(contract ERC721Metadata)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "522:28:34"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4077,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4074,
                  "name": "name",
                  "nodeType": "VariableDeclaration",
                  "scope": 4084,
                  "src": "473:18:34",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4073,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "473:6:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4076,
                  "name": "symbol",
                  "nodeType": "VariableDeclaration",
                  "scope": 4084,
                  "src": "493:20:34",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4075,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "493:6:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "472:42:34"
            },
            "returnParameters": {
              "id": 4082,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "551:0:34"
            },
            "scope": 4085,
            "src": "460:155:34",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 4086,
        "src": "390:227:34"
      }
    ],
    "src": "0:618:34"
  },
  "legacyAST": {
    "absolutePath": "/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/token/ERC721/ERC721Full.sol",
    "exportedSymbols": {
      "ERC721Full": [
        4085
      ]
    },
    "id": 4086,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 4063,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0",
          "<",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:31:34"
      },
      {
        "absolutePath": "/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/token/ERC721/ERC721.sol",
        "file": "./ERC721.sol",
        "id": 4064,
        "nodeType": "ImportDirective",
        "scope": 4086,
        "sourceUnit": 3703,
        "src": "33:22:34",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/token/ERC721/ERC721Enumerable.sol",
        "file": "./ERC721Enumerable.sol",
        "id": 4065,
        "nodeType": "ImportDirective",
        "scope": 4086,
        "sourceUnit": 4062,
        "src": "56:32:34",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/token/ERC721/ERC721Metadata.sol",
        "file": "./ERC721Metadata.sol",
        "id": 4066,
        "nodeType": "ImportDirective",
        "scope": 4086,
        "sourceUnit": 4237,
        "src": "89:30:34",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 4067,
              "name": "ERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3702,
              "src": "413:6:34",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721_$3702",
                "typeString": "contract ERC721"
              }
            },
            "id": 4068,
            "nodeType": "InheritanceSpecifier",
            "src": "413:6:34"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 4069,
              "name": "ERC721Enumerable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 4061,
              "src": "421:16:34",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Enumerable_$4061",
                "typeString": "contract ERC721Enumerable"
              }
            },
            "id": 4070,
            "nodeType": "InheritanceSpecifier",
            "src": "421:16:34"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 4071,
              "name": "ERC721Metadata",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 4236,
              "src": "439:14:34",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Metadata_$4236",
                "typeString": "contract ERC721Metadata"
              }
            },
            "id": 4072,
            "nodeType": "InheritanceSpecifier",
            "src": "439:14:34"
          }
        ],
        "contractDependencies": [
          1828,
          1975,
          3702,
          4061,
          4236,
          4467,
          4494,
          4529
        ],
        "contractKind": "contract",
        "documentation": "@title Full ERC721 Token\nThis implementation includes all the required and some optional functionality of the ERC721 standard\nMoreover, it includes approve all functionality using operator terminology\n@dev see https://eips.ethereum.org/EIPS/eip-721",
        "fullyImplemented": true,
        "id": 4085,
        "linearizedBaseContracts": [
          4085,
          4236,
          4529,
          4061,
          4494,
          3702,
          4467,
          1828,
          1975
        ],
        "name": "ERC721Full",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 4083,
              "nodeType": "Block",
              "src": "551:64:34",
              "statements": []
            },
            "documentation": null,
            "id": 4084,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 4079,
                    "name": "name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4074,
                    "src": "537:4:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "id": 4080,
                    "name": "symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4076,
                    "src": "543:6:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }
                ],
                "id": 4081,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 4078,
                  "name": "ERC721Metadata",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 4236,
                  "src": "522:14:34",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC721Metadata_$4236_$",
                    "typeString": "type(contract ERC721Metadata)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "522:28:34"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4077,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4074,
                  "name": "name",
                  "nodeType": "VariableDeclaration",
                  "scope": 4084,
                  "src": "473:18:34",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4073,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "473:6:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4076,
                  "name": "symbol",
                  "nodeType": "VariableDeclaration",
                  "scope": 4084,
                  "src": "493:20:34",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4075,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "493:6:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "472:42:34"
            },
            "returnParameters": {
              "id": 4082,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "551:0:34"
            },
            "scope": 4085,
            "src": "460:155:34",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 4086,
        "src": "390:227:34"
      }
    ],
    "src": "0:618:34"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.0+commit.1d4f565a.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.6",
  "updatedAt": "2019-04-08T18:19:55.629Z",
  "devdoc": {
    "details": "see https://eips.ethereum.org/EIPS/eip-721",
    "methods": {
      "approve(address,uint256)": {
        "details": "Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.",
        "params": {
          "to": "address to be approved for the given token ID",
          "tokenId": "uint256 ID of the token to be approved"
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address",
        "params": {
          "owner": "address to query the balance of"
        },
        "return": "uint256 representing the amount owned by the passed address"
      },
      "getApproved(uint256)": {
        "details": "Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.",
        "params": {
          "tokenId": "uint256 ID of the token to query the approval of"
        },
        "return": "address currently approved for the given token ID"
      },
      "isApprovedForAll(address,address)": {
        "details": "Tells whether an operator is approved by a given owner",
        "params": {
          "operator": "operator address which you want to query the approval of",
          "owner": "owner address which you want to query the approval of"
        },
        "return": "bool whether the given operator is approved by the given owner"
      },
      "name()": {
        "details": "Gets the token name",
        "return": "string representing the token name"
      },
      "ownerOf(uint256)": {
        "details": "Gets the owner of the specified token ID",
        "params": {
          "tokenId": "uint256 ID of the token to query the owner of"
        },
        "return": "address currently marked as the owner of the given token ID"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator",
        "params": {
          "_data": "bytes data to send along with a safe transfer check",
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf",
        "params": {
          "approved": "representing the status of the approval to be set",
          "to": "operator address to set the approval"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "implement supportsInterface(bytes4) using a lookup table"
      },
      "symbol()": {
        "details": "Gets the token symbol",
        "return": "string representing the token symbol"
      },
      "tokenByIndex(uint256)": {
        "details": "Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens",
        "params": {
          "index": "uint256 representing the index to be accessed of the tokens list"
        },
        "return": "uint256 token ID at the given index of the tokens list"
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "Gets the token ID at a given index of the tokens list of the requested owner",
        "params": {
          "index": "uint256 representing the index to be accessed of the requested tokens list",
          "owner": "address owning the tokens list to be accessed"
        },
        "return": "uint256 token ID at the given index of the tokens list owned by the requested address"
      },
      "tokenURI(uint256)": {
        "details": "Returns an URI for a given token ID Throws if the token ID does not exist. May return an empty string.",
        "params": {
          "tokenId": "uint256 ID of the token to query"
        }
      },
      "totalSupply()": {
        "details": "Gets the total amount of tokens stored by the contract",
        "return": "uint256 representing the total amount of tokens"
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg.sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      }
    },
    "title": "Full ERC721 Token This implementation includes all the required and some optional functionality of the ERC721 standard Moreover, it includes approve all functionality using operator terminology"
  },
  "userdoc": {
    "methods": {}
  }
}