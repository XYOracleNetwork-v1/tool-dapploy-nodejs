{
  "contractName": "ERC721Mintable",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addMinter",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceMinter",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MinterAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MinterRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.0+commit.1d4f565a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"ERC721 minting logic\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.\",\"params\":{\"to\":\"address to be approved for the given token ID\",\"tokenId\":\"uint256 ID of the token to be approved\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address\",\"params\":{\"owner\":\"address to query the balance of\"},\"return\":\"uint256 representing the amount owned by the passed address\"},\"getApproved(uint256)\":{\"details\":\"Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the approval of\"},\"return\":\"address currently approved for the given token ID\"},\"isApprovedForAll(address,address)\":{\"details\":\"Tells whether an operator is approved by a given owner\",\"params\":{\"operator\":\"operator address which you want to query the approval of\",\"owner\":\"owner address which you want to query the approval of\"},\"return\":\"bool whether the given operator is approved by the given owner\"},\"mint(address,uint256)\":{\"details\":\"Function to mint tokens\",\"params\":{\"to\":\"The address that will receive the minted tokens.\",\"tokenId\":\"The token id to mint.\"},\"return\":\"A boolean that indicates if the operation was successful.\"},\"ownerOf(uint256)\":{\"details\":\"Gets the owner of the specified token ID\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the owner of\"},\"return\":\"address currently marked as the owner of the given token ID\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator\",\"params\":{\"_data\":\"bytes data to send along with a safe transfer check\",\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf\",\"params\":{\"approved\":\"representing the status of the approval to be set\",\"to\":\"operator address to set the approval\"}},\"supportsInterface(bytes4)\":{\"details\":\"implement supportsInterface(bytes4) using a lookup table\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg.sender to be the owner, approved, or operator\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}}},\"title\":\"ERC721Mintable\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/token/ERC721/ERC721Mintable.sol\":\"ERC721Mintable\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/access/Roles.sol\":{\"keccak256\":\"0xa30e5f668ab6f9079aaae2271e42d97c058d59651cb07028d3e44b8e1acdc96a\",\"urls\":[\"bzzr://c56f8b2dcdf5e02fcd5ada3f178f05b71c74e88e29bdc1fe64074293cc9be0c0\"]},\"/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/access/roles/MinterRole.sol\":{\"keccak256\":\"0x07f254396554f3dd46d073769ff862fe914d71895cfdd92722537e77c38b166f\",\"urls\":[\"bzzr://6c4112098c87d84d52166aa8c646d48494e8191e15da3065679737eb3828aa65\"]},\"/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/drafts/Counters.sol\":{\"keccak256\":\"0x6b84da52c86e1098570a53cfb5df17a81612ec55085d698b15e51e5e50d57c6a\",\"urls\":[\"bzzr://659be1b1902a5b41a93144ab3281d8ce1af0112085d0a8c5bea757d53d3b0242\"]},\"/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/introspection/ERC165.sol\":{\"keccak256\":\"0xfc9a150499d249615460ef54216349677a41ff1e4dc06e74fdbfb20814ec91f9\",\"urls\":[\"bzzr://b8344d02cd9715be9cbf3a5a288867d4cc2a05c5834fd0073b747c85132c8f5e\"]},\"/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/introspection/IERC165.sol\":{\"keccak256\":\"0x627b77e4b5ad61ef6366ae3b135ca9bc7a20d5e4e971a74526031119452a8e54\",\"urls\":[\"bzzr://76e887336232edaeed7b1f29341df09bccf5078720fc66a8dbf780f32719e2ad\"]},\"/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xc31006228f03130fa677c7e7769b8fd0b1c5257deedae3fc278eb542b33c3059\",\"urls\":[\"bzzr://261b657d8d26013b2d3f95554f7f2ec853851ceec6333940d016feadff8b435a\"]},\"/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/token/ERC721/ERC721.sol\":{\"keccak256\":\"0xe0fe2733c23247f065b38d104f528b98738a0beddb21ae7f4268778b0c830d50\",\"urls\":[\"bzzr://24f8716f9d2ee0b5ceb6f3a97ffdfcb39a2c25f09cef7ed969b1376d83ac5e21\"]},\"/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/token/ERC721/ERC721Mintable.sol\":{\"keccak256\":\"0x37b08c69da24a63ed284cddf16c42461cd99db1ba2c7cb42fe83929b0176ad7a\",\"urls\":[\"bzzr://73a6d9e691f4a969eef3461603acf3df076fd6689761469d46a9fdb084ae24d5\"]},\"/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xaecf9e1556fc8350695c984472ba26ebac162710937847bbd100bc6d154fe481\",\"urls\":[\"bzzr://e1576472a9731267b88567e74de222465266948ea0bef51df339b2b09d319b43\"]},\"/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0x5a9e5aec9a5b29c8d81eb11fe6b4a0257668afcef747084957ba571b5c35cfcb\",\"urls\":[\"bzzr://6ae859faaf95d84f7b2c4ba588fff189b09762d9f4aeff2946c0a35436426e4d\"]},\"/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/utils/Address.sol\":{\"keccak256\":\"0xf627731aa5c4097a9e1fbdfd607f1f86b89ed498bf36968feaaad7dc89eacb1c\",\"urls\":[\"bzzr://ce30a05f75296b2676490a9492ea7a789d4035ef3ccad75da7baf9567724381e\"]}},\"version\":1}",
  "bytecode": "0x60806040526100367f01ffc9a70000000000000000000000000000000000000000000000000000000064010000000061007f810204565b6100687f80ac58cd0000000000000000000000000000000000000000000000000000000064010000000061007f810204565b61007a336401000000006100eb810204565b6101c8565b7fffffffff0000000000000000000000000000000000000000000000000000000080821614156100ae57600080fd5b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152602081905260409020805460ff19166001179055565b610103600582640100000000610c6e61013a82021704565b604051600160a060020a038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b600160a060020a038116151561014f57600080fd5b6101628282640100000000610191810204565b1561016c57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6000600160a060020a03821615156101a857600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b610d51806101d76000396000f3fe6080604052600436106100cf5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a781146100d4578063081812fc14610131578063095ea7b31461017757806323b872dd146101b257806340c10f19146101f557806342842e0e1461022e5780636352211e1461027157806370a082311461029b578063983b2d56146102e05780639865027514610313578063a22cb46514610328578063aa271e1a14610363578063b88d4fde14610396578063e985e9c514610469575b600080fd5b3480156100e057600080fd5b5061011d600480360360208110156100f757600080fd5b50357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166104a4565b604080519115158252519081900360200190f35b34801561013d57600080fd5b5061015b6004803603602081101561015457600080fd5b50356104d8565b60408051600160a060020a039092168252519081900360200190f35b34801561018357600080fd5b506101b06004803603604081101561019a57600080fd5b50600160a060020a03813516906020013561050a565b005b3480156101be57600080fd5b506101b0600480360360608110156101d557600080fd5b50600160a060020a038135811691602081013590911690604001356105c0565b34801561020157600080fd5b5061011d6004803603604081101561021857600080fd5b50600160a060020a0381351690602001356105e5565b34801561023a57600080fd5b506101b06004803603606081101561025157600080fd5b50600160a060020a0381358116916020810135909116906040013561060e565b34801561027d57600080fd5b5061015b6004803603602081101561029457600080fd5b503561062a565b3480156102a757600080fd5b506102ce600480360360208110156102be57600080fd5b5035600160a060020a0316610654565b60408051918252519081900360200190f35b3480156102ec57600080fd5b506101b06004803603602081101561030357600080fd5b5035600160a060020a031661068c565b34801561031f57600080fd5b506101b06106ac565b34801561033457600080fd5b506101b06004803603604081101561034b57600080fd5b50600160a060020a03813516906020013515156106b7565b34801561036f57600080fd5b5061011d6004803603602081101561038657600080fd5b5035600160a060020a031661073b565b3480156103a257600080fd5b506101b0600480360360808110156103b957600080fd5b600160a060020a038235811692602081013590911691604082013591908101906080810160608201356401000000008111156103f457600080fd5b82018360208201111561040657600080fd5b8035906020019184600183028401116401000000008311171561042857600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061074e945050505050565b34801561047557600080fd5b5061011d6004803603604081101561048c57600080fd5b50600160a060020a0381358116916020013516610776565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660009081526020819052604090205460ff1690565b60006104e3826107a4565b15156104ee57600080fd5b50600090815260026020526040902054600160a060020a031690565b60006105158261062a565b9050600160a060020a03838116908216141561053057600080fd5b33600160a060020a038216148061054c575061054c8133610776565b151561055757600080fd5b600082815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6105ca33826107c1565b15156105d557600080fd5b6105e0838383610820565b505050565b60006105f03361073b565b15156105fb57600080fd5b610605838361090f565b50600192915050565b6105e0838383602060405190810160405280600081525061074e565b600081815260016020526040812054600160a060020a031680151561064e57600080fd5b92915050565b6000600160a060020a038216151561066b57600080fd5b600160a060020a038216600090815260036020526040902061064e906109bf565b6106953361073b565b15156106a057600080fd5b6106a9816109c3565b50565b6106b533610a0b565b565b600160a060020a0382163314156106cd57600080fd5b336000818152600460209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b600061064e60058363ffffffff610a5316565b6107598484846105c0565b61076584848484610a8a565b151561077057600080fd5b50505050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205460ff1690565b600090815260016020526040902054600160a060020a0316151590565b6000806107cd8361062a565b905080600160a060020a031684600160a060020a03161480610808575083600160a060020a03166107fd846104d8565b600160a060020a0316145b8061081857506108188185610776565b949350505050565b82600160a060020a03166108338261062a565b600160a060020a03161461084657600080fd5b600160a060020a038216151561085b57600080fd5b61086481610c06565b600160a060020a038316600090815260036020526040902061088590610c4e565b600160a060020a03821660009081526003602052604090206108a690610c65565b600081815260016020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600160a060020a038216151561092457600080fd5b61092d816107a4565b1561093757600080fd5b6000818152600160209081526040808320805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03871690811790915583526003909152902061098390610c65565b6040518190600160a060020a038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b5490565b6109d460058263ffffffff610c6e16565b604051600160a060020a038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b610a1c60058263ffffffff610cbc16565b604051600160a060020a038216907fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b6000600160a060020a0382161515610a6a57600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b6000610a9e84600160a060020a0316610d08565b1515610aac57506001610818565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03888116602485015260448401879052608060648501908152865160848601528651600095928a169463150b7a029490938c938b938b939260a4019060208501908083838e5b83811015610b3f578181015183820152602001610b27565b50505050905090810190601f168015610b6c5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015610b8e57600080fd5b505af1158015610ba2573d6000803e3d6000fd5b505050506040513d6020811015610bb857600080fd5b50517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f150b7a020000000000000000000000000000000000000000000000000000000014915050949350505050565b600081815260026020526040902054600160a060020a0316156106a9576000908152600260205260409020805473ffffffffffffffffffffffffffffffffffffffff19169055565b8054610c6190600163ffffffff610d1016565b9055565b80546001019055565b600160a060020a0381161515610c8357600080fd5b610c8d8282610a53565b15610c9757600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b600160a060020a0381161515610cd157600080fd5b610cdb8282610a53565b1515610ce657600080fd5b600160a060020a0316600090815260209190915260409020805460ff19169055565b6000903b1190565b600082821115610d1f57600080fd5b5090039056fea165627a7a7230582065ef93ab0b91f65b37db354edc45308c593b354b97f74593e546c6d32351bd3c0029",
  "deployedBytecode": "0x6080604052600436106100cf5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a781146100d4578063081812fc14610131578063095ea7b31461017757806323b872dd146101b257806340c10f19146101f557806342842e0e1461022e5780636352211e1461027157806370a082311461029b578063983b2d56146102e05780639865027514610313578063a22cb46514610328578063aa271e1a14610363578063b88d4fde14610396578063e985e9c514610469575b600080fd5b3480156100e057600080fd5b5061011d600480360360208110156100f757600080fd5b50357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166104a4565b604080519115158252519081900360200190f35b34801561013d57600080fd5b5061015b6004803603602081101561015457600080fd5b50356104d8565b60408051600160a060020a039092168252519081900360200190f35b34801561018357600080fd5b506101b06004803603604081101561019a57600080fd5b50600160a060020a03813516906020013561050a565b005b3480156101be57600080fd5b506101b0600480360360608110156101d557600080fd5b50600160a060020a038135811691602081013590911690604001356105c0565b34801561020157600080fd5b5061011d6004803603604081101561021857600080fd5b50600160a060020a0381351690602001356105e5565b34801561023a57600080fd5b506101b06004803603606081101561025157600080fd5b50600160a060020a0381358116916020810135909116906040013561060e565b34801561027d57600080fd5b5061015b6004803603602081101561029457600080fd5b503561062a565b3480156102a757600080fd5b506102ce600480360360208110156102be57600080fd5b5035600160a060020a0316610654565b60408051918252519081900360200190f35b3480156102ec57600080fd5b506101b06004803603602081101561030357600080fd5b5035600160a060020a031661068c565b34801561031f57600080fd5b506101b06106ac565b34801561033457600080fd5b506101b06004803603604081101561034b57600080fd5b50600160a060020a03813516906020013515156106b7565b34801561036f57600080fd5b5061011d6004803603602081101561038657600080fd5b5035600160a060020a031661073b565b3480156103a257600080fd5b506101b0600480360360808110156103b957600080fd5b600160a060020a038235811692602081013590911691604082013591908101906080810160608201356401000000008111156103f457600080fd5b82018360208201111561040657600080fd5b8035906020019184600183028401116401000000008311171561042857600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061074e945050505050565b34801561047557600080fd5b5061011d6004803603604081101561048c57600080fd5b50600160a060020a0381358116916020013516610776565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660009081526020819052604090205460ff1690565b60006104e3826107a4565b15156104ee57600080fd5b50600090815260026020526040902054600160a060020a031690565b60006105158261062a565b9050600160a060020a03838116908216141561053057600080fd5b33600160a060020a038216148061054c575061054c8133610776565b151561055757600080fd5b600082815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6105ca33826107c1565b15156105d557600080fd5b6105e0838383610820565b505050565b60006105f03361073b565b15156105fb57600080fd5b610605838361090f565b50600192915050565b6105e0838383602060405190810160405280600081525061074e565b600081815260016020526040812054600160a060020a031680151561064e57600080fd5b92915050565b6000600160a060020a038216151561066b57600080fd5b600160a060020a038216600090815260036020526040902061064e906109bf565b6106953361073b565b15156106a057600080fd5b6106a9816109c3565b50565b6106b533610a0b565b565b600160a060020a0382163314156106cd57600080fd5b336000818152600460209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b600061064e60058363ffffffff610a5316565b6107598484846105c0565b61076584848484610a8a565b151561077057600080fd5b50505050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205460ff1690565b600090815260016020526040902054600160a060020a0316151590565b6000806107cd8361062a565b905080600160a060020a031684600160a060020a03161480610808575083600160a060020a03166107fd846104d8565b600160a060020a0316145b8061081857506108188185610776565b949350505050565b82600160a060020a03166108338261062a565b600160a060020a03161461084657600080fd5b600160a060020a038216151561085b57600080fd5b61086481610c06565b600160a060020a038316600090815260036020526040902061088590610c4e565b600160a060020a03821660009081526003602052604090206108a690610c65565b600081815260016020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600160a060020a038216151561092457600080fd5b61092d816107a4565b1561093757600080fd5b6000818152600160209081526040808320805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03871690811790915583526003909152902061098390610c65565b6040518190600160a060020a038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b5490565b6109d460058263ffffffff610c6e16565b604051600160a060020a038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b610a1c60058263ffffffff610cbc16565b604051600160a060020a038216907fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b6000600160a060020a0382161515610a6a57600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b6000610a9e84600160a060020a0316610d08565b1515610aac57506001610818565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03888116602485015260448401879052608060648501908152865160848601528651600095928a169463150b7a029490938c938b938b939260a4019060208501908083838e5b83811015610b3f578181015183820152602001610b27565b50505050905090810190601f168015610b6c5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015610b8e57600080fd5b505af1158015610ba2573d6000803e3d6000fd5b505050506040513d6020811015610bb857600080fd5b50517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f150b7a020000000000000000000000000000000000000000000000000000000014915050949350505050565b600081815260026020526040902054600160a060020a0316156106a9576000908152600260205260409020805473ffffffffffffffffffffffffffffffffffffffff19169055565b8054610c6190600163ffffffff610d1016565b9055565b80546001019055565b600160a060020a0381161515610c8357600080fd5b610c8d8282610a53565b15610c9757600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b600160a060020a0381161515610cd157600080fd5b610cdb8282610a53565b1515610ce657600080fd5b600160a060020a0316600090815260209190915260409020805460ff19169055565b6000903b1190565b600082821115610d1f57600080fd5b5090039056fea165627a7a7230582065ef93ab0b91f65b37db354edc45308c593b354b97f74593e546c6d32351bd3c0029",
  "sourceMap": "163:421:38:-;;;647:40:16;666:20;647:18;;;;:40;:::i;:::-;1978::31;1997:20;1978:18;;;;:40;:::i;:::-;283:22:4;294:10;283;;;;:22;:::i;:::-;163:421:38;;997:158:16;1072:25;;;;;;1064:34;;;;;;1108:33;;:20;:33;;;;;;;;;;:40;;-1:-1:-1;;1108:40:16;1144:4;1108:40;;;997:158::o;693:119:4:-;749:21;:8;762:7;749:12;;;;;;:21;:::i;:::-;785:20;;-1:-1:-1;;;;;785:20:4;;;;;;;;693:119;:::o;267:181:2:-;-1:-1:-1;;;;;343:21:2;;;;335:30;;;;;;384:18;388:4;394:7;384:3;;;;:18;:::i;:::-;383:19;375:28;;;;;;-1:-1:-1;;;;;414:20:2;:11;:20;;;;;;;;;;;:27;;-1:-1:-1;;414:27:2;437:4;414:27;;;267:181::o;794:162::-;866:4;-1:-1:-1;;;;;890:21:2;;;;882:30;;;;;;-1:-1:-1;;;;;;929:20:2;:11;:20;;;;;;;;;;;;;;;794:162::o;163:421:38:-;;;;;;;",
  "deployedSourceMap": "163:421:38:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;785:133:16;;8:9:-1;5:2;;;30:1;27;20:12;5:2;785:133:16;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;785:133:16;-1:-1:-1;;785:133:16;;;;;;;;;;;;;;;;;;;;;3781:151:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3781:151:31;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3781:151:31;;;;;;;-1:-1:-1;;;;;3781:151:31;;;;;;;;;;;;;;3204:292;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3204:292:31;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;3204:292:31;;;;;;;;;;;5337:180;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5337:180:31;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;5337:180:31;;;;;;;;;;;;;;;;;;450:132:38;;8:9:-1;5:2;;;30:1;27;20:12;5:2;450:132:38;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;450:132:38;;;;;;;;;6150::31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6150:132:31;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;6150:132:31;;;;;;;;;;;;;;;;;;2606:177;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2606:177:31;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2606:177:31;;;2228:160;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2228:160:31;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2228:160:31;-1:-1:-1;;;;;2228:160:31;;;;;;;;;;;;;;;;;;;516:90:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;516:90:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;516:90:4;-1:-1:-1;;;;;516:90:4;;;612:75;;8:9:-1;5:2;;;30:1;27;20:12;5:2;612:75:4;;;;4224:213:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4224:213:31;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;4224:213:31;;;;;;;;;;;403:107:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;403:107:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;403:107:4;-1:-1:-1;;;;;403:107:4;;;6987:211:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6987:211:31;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;;;;;6987:211:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;6987:211:31;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;6987:211:31;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;6987:211:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;6987:211:31;;-1:-1:-1;6987:211:31;;-1:-1:-1;;;;;6987:211:31;4758:145;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4758:145:31;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;4758:145:31;;;;;;;;;;;785:133:16;-1:-1:-1;;878:33:16;855:4;878:33;;;;;;;;;;;;;;785:133::o;3781:151:31:-;3840:7;3867:16;3875:7;3867;:16::i;:::-;3859:25;;;;;;;;-1:-1:-1;3901:24:31;;;;:15;:24;;;;;;-1:-1:-1;;;;;3901:24:31;;3781:151::o;3204:292::-;3267:13;3283:16;3291:7;3283;:16::i;:::-;3267:32;-1:-1:-1;;;;;;3317:11:31;;;;;;;;3309:20;;;;;;3347:10;-1:-1:-1;;;;;3347:19:31;;;;:58;;;3370:35;3387:5;3394:10;3370:16;:35::i;:::-;3339:67;;;;;;;;3417:24;;;;:15;:24;;;;;;:29;;-1:-1:-1;;3417:29:31;-1:-1:-1;;;;;3417:29:31;;;;;;;;;3461:28;;3417:24;;3461:28;;;;;;;3204:292;;;:::o;5337:180::-;5427:39;5446:10;5458:7;5427:18;:39::i;:::-;5419:48;;;;;;;;5478:32;5492:4;5498:2;5502:7;5478:13;:32::i;:::-;5337:180;;;:::o;450:132:38:-;520:4;358:20:4;367:10;358:8;:20::i;:::-;350:29;;;;;;;;536:18:38;542:2;546:7;536:5;:18::i;:::-;-1:-1:-1;571:4:38;450:132;;;;:::o;6150::31:-;6236:39;6253:4;6259:2;6263:7;6236:39;;;;;;;;;;;;;:16;:39::i;2606:177::-;2661:7;2696:20;;;:11;:20;;;;;;-1:-1:-1;;;;;2696:20:31;2734:19;;;2726:28;;;;;;2771:5;2606:177;-1:-1:-1;;2606:177:31:o;2228:160::-;2283:7;-1:-1:-1;;;;;2310:19:31;;;;2302:28;;;;;;-1:-1:-1;;;;;2347:24:31;;;;;;:17;:24;;;;;:34;;:32;:34::i;516:90:4:-;358:20;367:10;358:8;:20::i;:::-;350:29;;;;;;;;580:19;591:7;580:10;:19::i;:::-;516:90;:::o;612:75::-;655:25;669:10;655:13;:25::i;:::-;612:75::o;4224:213:31:-;-1:-1:-1;;;;;4303:16:31;;4309:10;4303:16;;4295:25;;;;;;4349:10;4330:30;;;;:18;:30;;;;;;;;-1:-1:-1;;;;;4330:34:31;;;;;;;;;;;;:45;;-1:-1:-1;;4330:45:31;;;;;;;;;;4390:40;;;;;;;4330:34;;4349:10;4390:40;;;;;;;;;;;4224:213;;:::o;403:107:4:-;459:4;482:21;:8;495:7;482:21;:12;:21;:::i;6987:211:31:-;7093:31;7106:4;7112:2;7116:7;7093:12;:31::i;:::-;7142:48;7165:4;7171:2;7175:7;7184:5;7142:22;:48::i;:::-;7134:57;;;;;;;;6987:211;;;;:::o;4758:145::-;-1:-1:-1;;;;;4861:25:31;;;4838:4;4861:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;4758:145::o;7392:152::-;7449:4;7481:20;;;:11;:20;;;;;;-1:-1:-1;;;;;7481:20:31;7518:19;;;7392:152::o;7904:246::-;7989:4;8005:13;8021:16;8029:7;8021;:16::i;:::-;8005:32;;8066:5;-1:-1:-1;;;;;8055:16:31;:7;-1:-1:-1;;;;;8055:16:31;;:51;;;;8099:7;-1:-1:-1;;;;;8075:31:31;:20;8087:7;8075:11;:20::i;:::-;-1:-1:-1;;;;;8075:31:31;;8055:51;:87;;;;8110:32;8127:5;8134:7;8110:16;:32::i;:::-;8047:96;7904:246;-1:-1:-1;;;;7904:246:31:o;9852:362::-;9965:4;-1:-1:-1;;;;;9945:24:31;:16;9953:7;9945;:16::i;:::-;-1:-1:-1;;;;;9945:24:31;;9937:33;;;;;;-1:-1:-1;;;;;9988:16:31;;;;9980:25;;;;;;10016:23;10031:7;10016:14;:23::i;:::-;-1:-1:-1;;;;;10050:23:31;;;;;;:17;:23;;;;;:35;;:33;:35::i;:::-;-1:-1:-1;;;;;10095:21:31;;;;;;:17;:21;;;;;:33;;:31;:33::i;:::-;10139:20;;;;:11;:20;;;;;;:25;;-1:-1:-1;;10139:25:31;-1:-1:-1;;;;;10139:25:31;;;;;;;;;10180:27;;10139:20;;10180:27;;;;;;;9852:362;;;:::o;8393:259::-;-1:-1:-1;;;;;8464:16:31;;;;8456:25;;;;;;8500:16;8508:7;8500;:16::i;:::-;8499:17;8491:26;;;;;;8528:20;;;;:11;:20;;;;;;;;:25;;-1:-1:-1;;8528:25:31;-1:-1:-1;;;;;8528:25:31;;;;;;;;8563:21;;:17;:21;;;;;:33;;:31;:33::i;:::-;8612;;8637:7;;-1:-1:-1;;;;;8612:33:31;;;8629:1;;8612:33;;8629:1;;8612:33;8393:259;;:::o;1070:112:11:-;1161:14;;1070:112::o;693:119:4:-;749:21;:8;762:7;749:21;:12;:21;:::i;:::-;785:20;;-1:-1:-1;;;;;785:20:4;;;;;;;;693:119;:::o;818:127::-;877:24;:8;893:7;877:24;:15;:24;:::i;:::-;916:22;;-1:-1:-1;;;;;916:22:4;;;;;;;;818:127;:::o;794:162:2:-;866:4;-1:-1:-1;;;;;890:21:2;;;;882:30;;;;;;-1:-1:-1;;;;;;929:20:2;:11;:20;;;;;;;;;;;;;;;794:162::o;10742:347:31:-;10863:4;10888:15;:2;-1:-1:-1;;;;;10888:13:31;;:15::i;:::-;10887:16;10883:58;;;-1:-1:-1;10926:4:31;10919:11;;10883:58;10967:70;;;;;11004:10;10967:70;;;;;;-1:-1:-1;;;;;10967:70:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;10951:13;;10967:36;;;;;;11004:10;;11016:4;;11022:7;;11031:5;;10967:70;;;;;;;;;;;10951:13;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;10967:70:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10967:70:31;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10967:70:31;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10967:70:31;-1:-1:-1;;11055:26:31;11065:16;11055:26;;-1:-1:-1;;10742:347:31;;;;;;:::o;11250:171::-;11349:1;11313:24;;;:15;:24;;;;;;-1:-1:-1;;;;;11313:24:31;:38;11309:106;;11402:1;11367:24;;;:15;:24;;;;;:37;;-1:-1:-1;;11367:37:31;;;11250:171::o;1283:108:11:-;1363:14;;:21;;1382:1;1363:21;:18;:21;:::i;:::-;1346:38;;1283:108::o;1188:89::-;1251:19;;1269:1;1251:19;;;1188:89::o;267:181:2:-;-1:-1:-1;;;;;343:21:2;;;;335:30;;;;;;384:18;388:4;394:7;384:3;:18::i;:::-;383:19;375:28;;;;;;-1:-1:-1;;;;;414:20:2;:11;:20;;;;;;;;;;;:27;;-1:-1:-1;;414:27:2;437:4;414:27;;;267:181::o;522:184::-;-1:-1:-1;;;;;601:21:2;;;;593:30;;;;;;641:18;645:4;651:7;641:3;:18::i;:::-;633:27;;;;;;;;-1:-1:-1;;;;;671:20:2;694:5;671:20;;;;;;;;;;;:28;;-1:-1:-1;;671:28:2;;;522:184::o;471:616:45:-;531:4;1034:20;;1072:8;;471:616::o;1219:145:21:-;1277:7;1304:6;;;;1296:15;;;;;;-1:-1:-1;1333:5:21;;;1219:145::o",
  "source": "pragma solidity >=0.5.0 <0.6.0;\n\nimport \"./ERC721.sol\";\nimport \"../../access/roles/MinterRole.sol\";\n\n/**\n * @title ERC721Mintable\n * @dev ERC721 minting logic\n */\ncontract ERC721Mintable is ERC721, MinterRole {\n    /**\n     * @dev Function to mint tokens\n     * @param to The address that will receive the minted tokens.\n     * @param tokenId The token id to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address to, uint256 tokenId) public onlyMinter returns (bool) {\n        _mint(to, tokenId);\n        return true;\n    }\n}\n",
  "sourcePath": "/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/token/ERC721/ERC721Mintable.sol",
  "ast": {
    "absolutePath": "/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/token/ERC721/ERC721Mintable.sol",
    "exportedSymbols": {
      "ERC721Mintable": [
        4301
      ]
    },
    "id": 4302,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 4275,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0",
          "<",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:31:38"
      },
      {
        "absolutePath": "/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/token/ERC721/ERC721.sol",
        "file": "./ERC721.sol",
        "id": 4276,
        "nodeType": "ImportDirective",
        "scope": 4302,
        "sourceUnit": 3703,
        "src": "33:22:38",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/access/roles/MinterRole.sol",
        "file": "../../access/roles/MinterRole.sol",
        "id": 4277,
        "nodeType": "ImportDirective",
        "scope": 4302,
        "sourceUnit": 404,
        "src": "56:43:38",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 4278,
              "name": "ERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3702,
              "src": "190:6:38",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721_$3702",
                "typeString": "contract ERC721"
              }
            },
            "id": 4279,
            "nodeType": "InheritanceSpecifier",
            "src": "190:6:38"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 4280,
              "name": "MinterRole",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 403,
              "src": "198:10:38",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MinterRole_$403",
                "typeString": "contract MinterRole"
              }
            },
            "id": 4281,
            "nodeType": "InheritanceSpecifier",
            "src": "198:10:38"
          }
        ],
        "contractDependencies": [
          403,
          1828,
          1975,
          3702,
          4467
        ],
        "contractKind": "contract",
        "documentation": "@title ERC721Mintable\n@dev ERC721 minting logic",
        "fullyImplemented": true,
        "id": 4301,
        "linearizedBaseContracts": [
          4301,
          403,
          3702,
          4467,
          1828,
          1975
        ],
        "name": "ERC721Mintable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 4299,
              "nodeType": "Block",
              "src": "526:56:38",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 4293,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4283,
                        "src": "542:2:38",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 4294,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4285,
                        "src": "546:7:38",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4292,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3529,
                      "src": "536:5:38",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 4295,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "536:18:38",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4296,
                  "nodeType": "ExpressionStatement",
                  "src": "536:18:38"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "hexValue": "74727565",
                    "id": 4297,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "571:4:38",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 4291,
                  "id": 4298,
                  "nodeType": "Return",
                  "src": "564:11:38"
                }
              ]
            },
            "documentation": "@dev Function to mint tokens\n@param to The address that will receive the minted tokens.\n@param tokenId The token id to mint.\n@return A boolean that indicates if the operation was successful.",
            "id": 4300,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 4288,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 4287,
                  "name": "onlyMinter",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 336,
                  "src": "500:10:38",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "500:10:38"
              }
            ],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4286,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4283,
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 4300,
                  "src": "464:10:38",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4282,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "464:7:38",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4285,
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 4300,
                  "src": "476:15:38",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4284,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "476:7:38",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "463:29:38"
            },
            "returnParameters": {
              "id": 4291,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4290,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 4300,
                  "src": "520:4:38",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4289,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "520:4:38",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "519:6:38"
            },
            "scope": 4301,
            "src": "450:132:38",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 4302,
        "src": "163:421:38"
      }
    ],
    "src": "0:585:38"
  },
  "legacyAST": {
    "absolutePath": "/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/token/ERC721/ERC721Mintable.sol",
    "exportedSymbols": {
      "ERC721Mintable": [
        4301
      ]
    },
    "id": 4302,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 4275,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0",
          "<",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:31:38"
      },
      {
        "absolutePath": "/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/token/ERC721/ERC721.sol",
        "file": "./ERC721.sol",
        "id": 4276,
        "nodeType": "ImportDirective",
        "scope": 4302,
        "sourceUnit": 3703,
        "src": "33:22:38",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/kevin/GitHub/tool-dapploy-nodejs/temp/contracts/access/roles/MinterRole.sol",
        "file": "../../access/roles/MinterRole.sol",
        "id": 4277,
        "nodeType": "ImportDirective",
        "scope": 4302,
        "sourceUnit": 404,
        "src": "56:43:38",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 4278,
              "name": "ERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3702,
              "src": "190:6:38",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721_$3702",
                "typeString": "contract ERC721"
              }
            },
            "id": 4279,
            "nodeType": "InheritanceSpecifier",
            "src": "190:6:38"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 4280,
              "name": "MinterRole",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 403,
              "src": "198:10:38",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MinterRole_$403",
                "typeString": "contract MinterRole"
              }
            },
            "id": 4281,
            "nodeType": "InheritanceSpecifier",
            "src": "198:10:38"
          }
        ],
        "contractDependencies": [
          403,
          1828,
          1975,
          3702,
          4467
        ],
        "contractKind": "contract",
        "documentation": "@title ERC721Mintable\n@dev ERC721 minting logic",
        "fullyImplemented": true,
        "id": 4301,
        "linearizedBaseContracts": [
          4301,
          403,
          3702,
          4467,
          1828,
          1975
        ],
        "name": "ERC721Mintable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 4299,
              "nodeType": "Block",
              "src": "526:56:38",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 4293,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4283,
                        "src": "542:2:38",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 4294,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4285,
                        "src": "546:7:38",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4292,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3529,
                      "src": "536:5:38",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 4295,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "536:18:38",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4296,
                  "nodeType": "ExpressionStatement",
                  "src": "536:18:38"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "hexValue": "74727565",
                    "id": 4297,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "571:4:38",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 4291,
                  "id": 4298,
                  "nodeType": "Return",
                  "src": "564:11:38"
                }
              ]
            },
            "documentation": "@dev Function to mint tokens\n@param to The address that will receive the minted tokens.\n@param tokenId The token id to mint.\n@return A boolean that indicates if the operation was successful.",
            "id": 4300,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 4288,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 4287,
                  "name": "onlyMinter",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 336,
                  "src": "500:10:38",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "500:10:38"
              }
            ],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4286,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4283,
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 4300,
                  "src": "464:10:38",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4282,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "464:7:38",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4285,
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 4300,
                  "src": "476:15:38",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4284,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "476:7:38",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "463:29:38"
            },
            "returnParameters": {
              "id": 4291,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4290,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 4300,
                  "src": "520:4:38",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4289,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "520:4:38",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "519:6:38"
            },
            "scope": 4301,
            "src": "450:132:38",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 4302,
        "src": "163:421:38"
      }
    ],
    "src": "0:585:38"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.0+commit.1d4f565a.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.6",
  "updatedAt": "2019-04-08T18:19:55.630Z",
  "devdoc": {
    "details": "ERC721 minting logic",
    "methods": {
      "approve(address,uint256)": {
        "details": "Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.",
        "params": {
          "to": "address to be approved for the given token ID",
          "tokenId": "uint256 ID of the token to be approved"
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address",
        "params": {
          "owner": "address to query the balance of"
        },
        "return": "uint256 representing the amount owned by the passed address"
      },
      "getApproved(uint256)": {
        "details": "Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.",
        "params": {
          "tokenId": "uint256 ID of the token to query the approval of"
        },
        "return": "address currently approved for the given token ID"
      },
      "isApprovedForAll(address,address)": {
        "details": "Tells whether an operator is approved by a given owner",
        "params": {
          "operator": "operator address which you want to query the approval of",
          "owner": "owner address which you want to query the approval of"
        },
        "return": "bool whether the given operator is approved by the given owner"
      },
      "mint(address,uint256)": {
        "details": "Function to mint tokens",
        "params": {
          "to": "The address that will receive the minted tokens.",
          "tokenId": "The token id to mint."
        },
        "return": "A boolean that indicates if the operation was successful."
      },
      "ownerOf(uint256)": {
        "details": "Gets the owner of the specified token ID",
        "params": {
          "tokenId": "uint256 ID of the token to query the owner of"
        },
        "return": "address currently marked as the owner of the given token ID"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator",
        "params": {
          "_data": "bytes data to send along with a safe transfer check",
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf",
        "params": {
          "approved": "representing the status of the approval to be set",
          "to": "operator address to set the approval"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "implement supportsInterface(bytes4) using a lookup table"
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg.sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      }
    },
    "title": "ERC721Mintable"
  },
  "userdoc": {
    "methods": {}
  }
}